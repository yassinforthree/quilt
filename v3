# Install packages if not installed
install.packages(c("shiny", "data.table", "tidyquant", "ggplot2", "plotly", "scales"))

# Load libraries
library(shiny)
library(data.table)
library(tidyquant)
library(ggplot2)
library(plotly)
library(scales)

# -----------------------------
# 1. Define Asset Classes, Categories, and Tickers (Including Crypto)
# -----------------------------
asset_info <- data.table(
  asset_class = c("U.S. equities", "China equities", "Europe equities", "Japan equities",
                  "EM equities", "High yield", "IG credit", "DM gov. debt",
                  "Emerging debt", "Infrastructure", "REITs", "Commodities", "Cash",
                  "Bitcoin", "Ethereum", "Solana"),
  ticker = c("^GSPC", "MCHI", "VGK", "EWJ", 
             "EEM", "HYG", "LQD", "IEF", 
             "EMB", "IGF", "VNQ", "DBC", "BIL",
             "BTC-USD", "ETH-USD", "SOL-USD"),
  category = c("Equities", "Equities", "Equities", "Equities",
               "Equities", "Bonds", "Bonds", "Bonds",
               "Bonds", "Private", "Private", "Private", "Bonds",
               "Crypto", "Crypto", "Crypto")
)

# -----------------------------
# 2. Define UI
# -----------------------------
ui <- fluidPage(
  titlePanel("BlackRock-Style Asset Return Map (with Crypto)"),
  sidebarLayout(
    sidebarPanel(
      dateRangeInput("date_range", "Select Date Range:",
                     start = "2011-01-01", end = Sys.Date(),
                     min = "2011-01-01", max = Sys.Date()),
      selectInput("benchmark", "Select Benchmark (for Relative Returns):",
                  choices = asset_info$asset_class, selected = "U.S. equities"),
      radioButtons("view_type", "View Mode:",
                   choices = c("Absolute Returns" = "absolute", "Relative to Benchmark" = "relative")),
      checkboxGroupInput("category_filter", "Filter by Category:",
                         choices = c("Equities", "Bonds", "Private", "Crypto"),
                         selected = c("Equities", "Bonds", "Private", "Crypto")),
      downloadButton("downloadData", "Download Data as CSV"),
      downloadButton("downloadPlot", "Download Chart as PNG"),
      width = 3
    ),
    mainPanel(
      plotlyOutput("quiltPlot", height = "800px")
    )
  )
)

# -----------------------------
# 3. Define Server
# -----------------------------
server <- function(input, output, session) {
  
  processed_data <- reactive({
    # Fetch Yahoo Finance data for all tickers
    prices <- tq_get(asset_info$ticker,
                     from = input$date_range[1],
                     to = input$date_range[2],
                     get = "stock.prices")
    
    DT <- as.data.table(prices)
    
    # Calculate annual returns
    annual_returns <- DT[, .(annual_return = (last(adjusted) / first(adjusted)) - 1),
                         by = .(symbol, year = year(date))]
    
    # Merge with asset info
    annual_returns <- merge(annual_returns, asset_info, by.x = "symbol", by.y = "ticker", all.x = TRUE)
    
    # Filter by category
    annual_returns <- annual_returns[category %in% input$category_filter]
    
    # Compute Annualised (CAGR)
    annualised <- annual_returns[, .(
      annual_return = (prod(1 + annual_return)^(1/.N)) - 1,
      year = "Annualised"
    ), by = .(asset_class, category)]
    
    combined <- rbindlist(list(annual_returns, annualised), fill = TRUE)
    
    # Apply relative returns if selected
    if (input$view_type == "relative") {
      benchmark <- combined[asset_class == input$benchmark, .(year, bench_return = annual_return)]
      combined <- merge(combined, benchmark, by = "year", all.x = TRUE)
      combined[, annual_return := annual_return - bench_return]
    }
    
    # Rank per year
    combined[, rank := frank(-annual_return, ties.method = "first"), by = year]
    
    # Labels
    combined[, label := paste0(asset_class, "\n", percent(annual_return, accuracy = 0.1))]
    
    combined
  })
  
  # -----------------------------
  # 4. Render Quilt Plot
  # -----------------------------
  output$quiltPlot <- renderPlotly({
    df <- processed_data()
    
    category_colors <- c(
      "Equities" = "#0F8D57",    # Green
      "Bonds" = "#F5D142",       # Yellow
      "Private" = "#D9481E",     # Orange/Red
      "Crypto" = "#3366CC"       # Blue for crypto
    )
    
    p <- ggplot(df, aes(x = factor(year), y = rank, fill = category)) +
      geom_tile(width = 0.95, height = 0.95, color = "white") +
      geom_text(aes(label = label), size = 3, color = "white") +
      scale_fill_manual(values = category_colors) +
      scale_y_reverse() +
      labs(x = "", y = "", fill = "Category",
           title = "Annual Asset Class Performance (with Crypto)") +
      theme_minimal(base_size = 14) +
      theme(
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        axis.text.x = element_text(face = "bold"),
        panel.grid = element_blank(),
        legend.position = "bottom"
      )
    
    ggplotly(p, tooltip = c("x", "label"))
  })
  
  # -----------------------------
  # 5. Download Data & Plot
  # -----------------------------
  output$downloadData <- downloadHandler(
    filename = function() { paste0("asset_returns_with_crypto_", Sys.Date(), ".csv") },
    content = function(file) {
      fwrite(processed_data(), file)
    }
  )
  
  output$downloadPlot <- downloadHandler(
    filename = function() { paste0("asset_quilt_with_crypto_", Sys.Date(), ".png") },
    content = function(file) {
      ggsave(file, plot = last_plot(), width = 12, height = 8)
    }
  )
}

# Run App
shinyApp(ui, server)
